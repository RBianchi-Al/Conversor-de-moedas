{"version":3,"sources":["listar-moedas.js","conversor-moedas.js","serviceWorker.js","index.js"],"names":["ListarMoedas","sort","moeda1","moeda2","descricao","map","moeda","value","sigla","key","ConversorMoedas","useState","valor","setValor","moedaDe","setMoedaDe","moedaPara","setMoedaPara","exibirSpinner","setExibirSpinner","formValidado","setFormValidado","exibirModal","setExibirModal","resultadoConversao","setResultadoConversao","exibirMensagemErro","setExibirMensagemErro","handleFecharModal","event","exibirErro","Alert","variant","show","Jumbotron","Form","onSubmit","preventDefault","currentTarget","checkValidity","axios","get","then","res","cotacao","dadosCotacao","success","cotacaoDe","rates","cotacaoPara","toFixed","obterCotacao","data","catch","err","noValidate","validated","Row","Col","sm","Control","placeholder","onChange","target","replace","required","as","className","style","paddingTop","icon","faAngleDoubleRight","Button","type","data-testid","Spinner","animation","size","Modal","onHide","Header","closeButton","Title","Body","Footer","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.f74d5716.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction ListarMoedas(){\r\n\r\n    const MOEDAS = [\r\n        {\"sigla\": \"AUD\", \"descricao\": \"Dólar australiano\"},\r\n        {\"sigla\": \"BNG\", \"descricao\": \"Lev búlgaro\"},\r\n        {\"sigla\": \"BRL\", \"descricao\": \"Real brasileiro\"},\r\n        {\"sigla\": \"CAD\", \"descricao\": \"Dólar canadense\"},\r\n        {\"sigla\": \"CHF\", \"descricao\": \"Franco Suíço\"},\r\n        {\"sigla\": \"CNY\", \"descricao\": \"Yan chinês\"},\r\n        {\"sigla\": \"CZK\", \"descricao\": \"Coroa República Tcheca\"},\r\n        {\"sigla\": \"DKK\", \"descricao\": \"Coroa dinamarquesa\"},\r\n        {\"sigla\": \"EUR\", \"descricao\": \"Euro\"},\r\n        {\"sigla\": \"GBP\", \"descricao\": \"Libra Esterlina\"},\r\n        {\"sigla\": \"HKD\", \"descricao\": \"Dólar de Hong Kong\"},\r\n        {\"sigla\": \"HRK\", \"descricao\": \"Coroa Croácia\"},\r\n        {\"sigla\": \"HUF\", \"descricao\": \"Florin Hungaro\"},\r\n        {\"sigla\": \"IDR\", \"descricao\": \"Rúpia indiana\"},\r\n        {\"sigla\": \"JPY\", \"descricao\": \"Iene Japonês\"},\r\n        {\"sigla\": \"KRW\", \"descricao\": \"Won Sul-coreano\"},\r\n        {\"sigla\": \"MXN\", \"descricao\": \"Peso Mexicano\"},\r\n        {\"sigla\": \"MYR\", \"descricao\": \"Malásia Hinggit\"},\r\n        {\"sigla\": \"NOK\", \"descricao\": \"Coroa Noruega\"},\r\n        {\"sigla\": \"NZD\", \"descricao\": \"Dólar da Nova Zelândia\"},\r\n        {\"sigla\": \"PHP\", \"descricao\": \"Peso filipino\"},\r\n        {\"sigla\": \"PLN\", \"descricao\": \"Zloty Polônia\"},\r\n        {\"sigla\": \"RON\", \"descricao\": \"Lev Romeno\"},\r\n        {\"sigla\": \"RUB\", \"descricao\": \"Belarus Ruble\"},\r\n        {\"sigla\": \"SEK\", \"descricao\": \"Coroa Suécia\"},\r\n        {\"sigla\": \"SGD\", \"descricao\": \"Dólar de Singapura\"},\r\n        {\"sigla\": \"THB\", \"descricao\": \"Baht Tailândia\"},\r\n        {\"sigla\": \"TRY\", \"descricao\": \"Lira turca\"},\r\n        {\"sigla\": \"USD\", \"descricao\": \"Dólar dos Estados Unidos\"},\r\n        {\"sigla\": \"ZAR\", \"descricao\": \"Rand África do Sul\"},\r\n        \r\n    ];\r\n\r\n    function compare(moeda1, moeda2){\r\n        if(moeda1.descricao < moeda2.descricao){\r\n            return -1;\r\n    \r\n        } else if (moeda1.descricao > moeda2.descricao){\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n    return MOEDAS.sort(compare).map(moeda => \r\n        <option value={moeda.sigla} key={moeda.sigla}>\r\n            {moeda.descricao}\r\n        </option>\r\n        );\r\n\r\n}\r\n\r\nexport default ListarMoedas;","import React, { useState } from 'react';\nimport './conversor-moedas.css';\nimport {\n  Jumbotron, Button, Form, Col, Spinner, Alert, Modal\n} from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleDoubleRight } from '@fortawesome/free-solid-svg-icons';\nimport ListarMoedas from './listar-moedas';\nimport axios from 'axios';\n\n\nfunction ConversorMoedas() {\n\n  const FIXER_URL = 'http://data.fixer.io/api/latest?access_key=eba7130a5b2d720ce43eb5fcddd47cc3'\n\n  const [valor, setValor] = useState('');\n  const [moedaDe, setMoedaDe] = useState('BRL');\n  const [moedaPara, setMoedaPara] = useState('USD');\n  const [exibirSpinner, setExibirSpinner] = useState(false);\n  const [formValidado, setFormValidado] = useState(false);\n  const [exibirModal, setExibirModal] = useState(false);\n  const [resultadoConversao, setResultadoConversao] = useState('');\n  const [exibirMensagemErro, setExibirMensagemErro] = useState(false);\n\n\n\n  function handleValor(event) {\n    setValor(event.target.value.replace(/\\D/g, ''));\n\n  }\n\n  function handleMoedaDe(event) {\n    setMoedaDe(event.target.value)\n  }\n\n  function handleMoedaPara(event) {\n    setMoedaPara(event.target.value)\n  }\n\n  function handleFecharModal(event){\n    setValor('1');\n    setMoedaDe('BRL');\n    setMoedaPara('USD');\n    setFormValidado(false);\n    setExibirModal(false);\n\n\n  }\n\n  function converter(event){\n    event.preventDefault();\n    setFormValidado(true);\n    if (event.currentTarget.checkValidity() === true){\n      setExibirSpinner(true);\n      axios.get(FIXER_URL)\n        .then(res => {\n          const cotacao = obterCotacao(res.data);\n         if (cotacao !== false){\n          setResultadoConversao(`${valor} ${moedaDe} = ${cotacao} ${moedaPara}`);\n          setExibirModal(true);\n          setExibirSpinner(false);\n          setExibirMensagemErro(false);\n         }else{\n           exibirErro();\n\n         }\n          \n        }).catch(err => exibirErro());\n     \n    }\n  }\n  function obterCotacao(dadosCotacao){\n    if (!dadosCotacao || dadosCotacao.success !== true){\n      return false;\n    }\n    const cotacaoDe = dadosCotacao.rates [moedaDe];\n    const cotacaoPara = dadosCotacao.rates [moedaPara];\n    const cotacao = (1 / cotacaoDe * cotacaoPara) * valor;\n    return cotacao.toFixed(2);\n  }\n\n function exibirErro (){\n   setExibirMensagemErro(true);\n   setExibirSpinner(false);\n   \n }\n  \n  return (\n    <div>\n      <h1> Conversor de Moedas</h1>\n      <Alert variant=\"danger\" show={exibirMensagemErro}>\n        Erro ao obter dados de conversão, tente novamente!\n      </Alert>\n\n      <Jumbotron>\n        <Form onSubmit={converter} noValidate validated={formValidado}>\n          <Form.Row>\n            <Col sm=\"3\">\n              <Form.Control\n                placeholder=\"0\"\n                value={valor}\n                onChange={handleValor}\n                required />\n            </Col>\n\n            <Col sm=\"3\">\n              <Form.Control as=\"select\"\n                value={moedaDe}\n                onChange={handleMoedaDe}\n              >\n                <ListarMoedas />\n              </Form.Control>\n            </Col>\n\n            <Col sm=\"1\" className=\"text-center\" style={{ paddingTop: '5px' }}>\n              <FontAwesomeIcon icon={faAngleDoubleRight} />\n            </Col>\n\n            <Col sm=\"3\">\n              <Form.Control as=\"select\"\n                value={moedaPara}\n                onChange={handleMoedaPara}\n              >\n                <ListarMoedas />\n              </Form.Control>\n            </Col>\n            <Col sm=\"2\">\n              <Button variant='success' type='submit' data-testid=\"btn-converter\">\n                <span className={exibirSpinner ? null : 'hidden'}>\n                  <Spinner animation=\"border\" size=\"sm\" />\n                </span>\n                <span className={exibirSpinner ? 'hidden' : null}>\n                Converter\n                </span>\n                  \n              </Button>\n            </Col>\n\n          </Form.Row>\n        </Form>\n          <Modal show={exibirModal} onHide={handleFecharModal} data-testid=\"modal\">\n            <Modal.Header closeButton>\n              <Modal.Title>Conversão</Modal.Title>\n\n            </Modal.Header>\n            <Modal.Body>\n              {resultadoConversao}\n          </Modal.Body>\n\n            <Modal.Footer>\n              <Button variant=\"success\" onClick={handleFecharModal}>\n                Nova conversão\n            </Button>\n            </Modal.Footer>\n          </Modal>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default ConversorMoedas;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ConversorMoedas from './conversor-moedas';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConversorMoedas />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}